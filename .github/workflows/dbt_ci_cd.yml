name: DBT CI/CD Pipeline Validation

on:
  push:
    tags:
      - 'pipeline validation'
    branches:
      - main
      - develop
      - 'feature/*'
  issues:
    types: [labeled, closed]

jobs:
  deploy_and_validate_pipeline:
    runs-on: ubuntu-latest

    env:
      # Snowflake
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install CLI tools used by workflow
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install Python Dependencies
        run: pip install -r scripts/python/requirements.txt

      - name: Set GITHUB_ISSUE_ID safely for any event
        run: |
          if [ "${{ github.event_name }}" = "issues" ] && [ -n "${{ github.event.issue.number }}" ]; then
            echo "GITHUB_ISSUE_ID=${{ github.event.issue.number }}" >> $GITHUB_ENV
          else
            echo "GITHUB_ISSUE_ID=no_issue" >> $GITHUB_ENV
          fi

      - name: Run Pre-commit Checks (Code Quality & Security)
        run: pre-commit run --all-files

      - name: Determine DBT Target Schema and Environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "DBT_TARGET_SCHEMA=prod"   >> $GITHUB_ENV
            echo "DBT_ENVIRONMENT=prod"    >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "DBT_TARGET_SCHEMA=dev"   >> $GITHUB_ENV
            echo "DBT_ENVIRONMENT=dev"     >> $GITHUB_ENV
          else
            ISSUE_ID="${{ env.GITHUB_ISSUE_ID }}"
            SCHEMA_NAME="feature_${ISSUE_ID}"
            echo "DBT_TARGET_SCHEMA=${SCHEMA_NAME}" >> $GITHUB_ENV
            echo "DBT_ENVIRONMENT=ci_cd"             >> $GITHUB_ENV
          fi

      # --- Optional issue-driven automation ---
      - name: Handle Feature Request Automation
        if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'feature')
        run: |
          FEATURE_NAME=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH" | grep 'Schema/Object Name' | cut -d':' -f2 | xargs | tr '-' '_')
          echo "FEATURE_NAME=${FEATURE_NAME}" >> $GITHUB_ENV
          echo "Creating schema/object: ${FEATURE_NAME}"
          python scripts/python/create_schema.py "${{ github.event.issue.number }}"

      - name: Handle Cleanup Automation
        if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'cleanup')
        run: |
          OBJECT_NAME=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH" | grep 'Schema/Object Name to Delete' | cut -d':' -f2 | xargs | tr '-' '_')
          ISSUE_ID=${{ github.event.issue.number }}
          echo "OBJECT_NAME=${OBJECT_NAME}" >> $GITHUB_ENV
          python scripts/python/drop_schema.py "${OBJECT_NAME}" "${ISSUE_ID}"

      # Generate seeds via Python
      - name: Generate Dynamic CSV Seed Files
        run: python scripts/python/create_seed.py

      - name: Verify seeds on disk
        run: |
          ls -la scripts/dbt/seeds
          test -f scripts/dbt/seeds/products.csv            || (echo "Missing products.csv" && exit 1)
          test -f scripts/dbt/seeds/warehouses.csv          || (echo "Missing warehouses.csv" && exit 1)
          test -f scripts/dbt/seeds/inventory_movements.csv || (echo "Missing inventory_movements.csv" && exit 1)
          test -f scripts/dbt/seeds/customer_orders.csv     || (echo "Missing customer_orders.csv" && exit 1)

      - name: Verify dbt can see the seeds
        working-directory: scripts/dbt
        run: |
          dbt deps
          dbt ls --profiles-dir . --select seed:*
          dbt ls --profiles-dir . --select ref:products   || (echo "dbt can't find ref:products" && exit 1)
          dbt ls --profiles-dir . --select ref:warehouses || (echo "dbt can't find ref:warehouses" && exit 1)

      # --- DBT: always from project dir, using repo's profiles.yml ---
      - name: Install dbt packages
        working-directory: scripts/dbt
        run: dbt deps

      # Guardrails & clean cache (fail fast if a macro call is reintroduced)
      - name: Guardrails & clean cache
        run: |
          echo "Active dbt_project.yml:"
          sed -n '1,200p' scripts/dbt/dbt_project.yml
          if grep -n "generate_schema_name(" scripts/dbt/dbt_project.yml; then
            echo "dbt_project.yml still calls generate_schema_name(). Fail."; exit 1; fi
          if grep -n "generate_alias_name(" scripts/dbt/dbt_project.yml; then
            echo "dbt_project.yml still calls generate_alias_name(). Fail."; exit 1; fi
          rm -rf scripts/dbt/target

      - name: Verify DBT project (parse/compile)
        working-directory: scripts/dbt
        run: |
          dbt --version
          dbt parse   --profiles-dir . --no-partial-parse
          dbt compile --profiles-dir .

      - name: Run DBT Seed Data Load
        working-directory: scripts/dbt
        run: dbt seed --profiles-dir .

      - name: Run DBT Models and Tests
        working-directory: scripts/dbt
        run: |
          dbt run  --profiles-dir .
          dbt test --profiles-dir .

      - name: Generate DBT Documentation
        working-directory: scripts/dbt
        run: dbt docs generate --profiles-dir .

      - name: Upload DBT Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dbt-docs-${{ env.DBT_TARGET_SCHEMA }}
          path: scripts/dbt/target/

      - name: Generate Observability Metrics Dashboard
        run: python scripts/python/create_dashboard.py

      - name: Commit and Deploy Metrics Dashboard to GitHub Pages
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b dashboard-${{ env.DBT_TARGET_SCHEMA }}
          git add dashboard_*.md
          git commit -m "docs(metrics): update dashboard for schema ${{ env.DBT_TARGET_SCHEMA }}"
          git push -f origin dashboard-${{ env.DBT_TARGET_SCHEMA }}

      - name: Deploy Dashboard via GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./

      # --- Slack notifications (unchanged) ---
      - name: Slack Notify on Schema/Object Creation
        if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'feature')
        uses: slackapi/slack-github-action@v1.26.0
        env:
          FEATURE_NAME: ${{ env.FEATURE_NAME }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {"text":"âœ… Created schema/object: `${{ env.FEATURE_NAME }}` (Issue #${{ github.event.issue.number }})"}

      - name: Slack Notify on Schema/Object Deletion
        if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'cleanup')
        uses: slackapi/slack-github-action@v1.26.0
        env:
          OBJECT_NAME: ${{ env.OBJECT_NAME }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {"text":"ðŸ§¹ Explicitly deleted schema/object: `${{ env.OBJECT_NAME }}` (Issue #${{ github.event.issue.number }})"}

      - name: Notify via Slack on Pipeline Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {"text":"ðŸš¨ DBT pipeline validation failed for schema `${{ env.DBT_TARGET_SCHEMA }}`. Immediate attention required."}

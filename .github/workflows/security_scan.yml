name: SQL SAST (PR-scoped, hardened)

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (dev/prod/ci)"
        required: false
        type: string
      extra_flags:
        description: "Optional flags or selectors"
        required: false
        type: string
      requirements_path:
        description: "Path to Python requirements file"
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK_URL:
        required: false
  pull_request:
    branches: [main, develop, 'feature/*']
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "models/**"
      - "seeds/**"
      - "scripts/dbt/**"
      - ".sqlfluff"
      - "**/*.sql"

permissions:
  contents: read
  pull-requests: write      # for PR annotations/comments
  security-events: write    # for SARIF upload
  actions: read

concurrency:
  group: sast-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  sast_security_scan:
    name: SQLFluff SAST (changed files only)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft != true || github.event_name != 'pull_request'  # run on workflow_call or non-draft PRs

    env:
      SQLFLUFF_DIALECT: snowflake
      SQLFLUFF_CONFIG: .sqlfluff
      IS_FORK: ${{ github.event.pull_request.head.repo.fork || false }}

    steps:
      # ----- Runner & repo prep -----
      - name: Harden runner (baseline)
        run: |
          set -euo pipefail
          sudo sysctl -w net.ipv4.conf.all.route_localnet=0 || true
          echo "Baseline hardening applied."

      - name: Checkout repository (full history for diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt
            ${{ inputs.requirements_path }}

      - name: Install Python dependencies
        if: inputs.requirements_path != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r "${{ inputs.requirements_path }}"

      # ----- Change detection & commit validation -----
      - name: Detect changed files (SQL/DBT only)
        id: changed
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/*.sql
            models/**
            seeds/**
            scripts/dbt/**
            .sqlfluff

      - name: Validate commit scope (block risky automation edits)
        if: steps.changed.outputs.all_changed_files_count != '0'
        shell: bash
        run: |
          set -euo pipefail
          disallowed='(^\.github/workflows/.*$)|(^scripts/.*\.(sh|py)$)'
          blocked=0
          while IFS= read -r f; do
            if [[ "$f" =~ $disallowed ]]; then
              echo "::error file=$f::Changes to automation files are not allowed in this SAST-scoped PR without security approval."
              blocked=1
            fi
          done < <(printf "%s\n" ${{ steps.changed.outputs.all_changed_files }})
          exit $blocked

      - name: No relevant changes â€” skip
        if: steps.changed.outputs.all_changed_files_count == '0'
        run: |
          echo "No SQL/DBT changes in this PR. Skipping SQLFluff."
          echo "::notice::No relevant files changed."

      # ----- Lint changed files only -----
      - name: Run SQLFluff Lint (PR diff scope)
        if: steps.changed.outputs.all_changed_files_count != '0'
        id: lint
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(printf "%s\n" ${{ steps.changed.outputs.all_changed_files }} | grep -E '\.sql$|^models/|^seeds/|^scripts/dbt/' || true)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No SQL/DBT files to lint."
            echo "status=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Linting changed files:"; printf ' - %s\n' "${FILES[@]}"

          # Inline PR annotations (GitHub format)
          set +e
          sqlfluff lint "${FILES[@]}" --dialect "${SQLFLUFF_DIALECT}" --config "${SQLFLUFF_CONFIG}" --format github-annotation
          lint_status=$?
          set -e

          # JSON report for artifacts / SARIF conversion
          sqlfluff lint "${FILES[@]}" --dialect "${SQLFLUFF_DIALECT}" --config "${SQLFLUFF_CONFIG}" --format json > sqlfluff-report.json || true
          echo "status=${lint_status}" >> "$GITHUB_OUTPUT"

      # ----- SARIF for Code Scanning -----
      - name: Convert JSON to SARIF
        if: steps.lint.outputs.status != '0'
        shell: bash
        run: |
          python - <<'PY'
          import json
          rep=json.load(open('sqlfluff-report.json'))
          sarif={"version":"2.1.0","$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"sqlfluff","informationUri":"https://docs.sqlfluff.com"}},"results":[]}]}
          for file in rep:
              for v in file.get("violations",[]):
                  level="note"
                  sev=(v.get("severity","") or "").upper()
                  if sev in ("E","HIGH","H"): level="error"
                  elif sev in ("W","MEDIUM","M","L"): level="warning"
                  sarif["runs"][0]["results"].append({
                      "ruleId": v.get("rule_code","sqlfluff"),
                      "level": level,
                      "message": {"text": v.get("description","SQLFluff finding")},
                      "locations": [{
                          "physicalLocation": {
                              "artifactLocation":{"uri": file["filepath"]},
                              "region":{"startLine": v.get("line_no",1), "startColumn": v.get("line_pos",1)}
                          }
                      }]
                  })
          open("sqlfluff-report.sarif","w").write(json.dumps(sarif))
          PY

      - name: Upload SARIF to Code Scanning
        if: steps.lint.outputs.status != '0'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sqlfluff-report.sarif

      # ----- Artifacts & notifications -----
      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sqlfluff-report
          path: |
            sqlfluff-report.json
            sqlfluff-report.sarif
          if-no-files-found: ignore
          retention-days: 7

      - name: Slack â€” failure summary (skips on forks)
        if: failure() && env.IS_FORK != 'true' && secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            { "text": "ðŸš¨ SQL SAST failed on `${{ github.ref_name }}` for PR #${{ github.event.number }}. See PR annotations and SARIF for details." }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Slack â€” success (optional, skips on forks)
        if: success() && env.IS_FORK != 'true' && secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            { "text": "âœ… SQL SAST passed on `${{ github.ref_name }}` for PR #${{ github.event.number }}." }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # ----- Enforce outcome -----
      - name: Enforce failure on findings
        if: steps.lint.outputs.status != '0'
        run: exit 1

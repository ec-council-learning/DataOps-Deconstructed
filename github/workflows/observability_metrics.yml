name: Observability Metrics Dashboard Generation

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (dev/prod/ci)"
        required: false
        type: string
      extra_flags:
        description: "Optional flags or selectors"
        required: false
        type: string
      requirements_path:
        description: "Path to Python requirements file"
        required: false
        type: string
      master_schema:
        description: "Master-data schema (seeds) within LOGISTICS_DEMO"
        required: false
        type: string
        default: "master_data"
    secrets:
      SNOWFLAKE_ACCOUNT: {required: false}
      SNOWFLAKE_USER: {required: false}
      SNOWFLAKE_PASSWORD: {required: false}
      SNOWFLAKE_ROLE: {required: false}
      SNOWFLAKE_WAREHOUSE: {required: false}
      SLACK_WEBHOOK_URL: {required: false}
      SNOWFLAKE_PRIVATE_KEY_B64: {required: false}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: {required: false}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: observability-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash -euo pipefail

jobs:
  generate_metrics_dashboard:
    runs-on: ubuntu-latest
    env:
      # Snowflake / dbt
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      # Optional key-pair auth (preferred if provided)
      SNOWFLAKE_PRIVATE_KEY_B64: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_B64 }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}

      # Context (non-sensitive)
      RUN_ID: ${{ github.run_id }}
      RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      GIT_SHA: ${{ github.sha }}
      DBT_PROFILES_DIR: scripts/dbt
      TZ: UTC

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt
            ${{ inputs.requirements_path }}

      - name: Install Python dependencies
        if: inputs.requirements_path != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r "${{ inputs.requirements_path }}"

      # Optional dbt build (remove if dashboards only read warehouse)
      - name: Run dbt build/tests (layer-agnostic)
        working-directory: scripts/dbt
        env:
          DBT_ENVIRONMENT: ${{ inputs.environment || 'prod' }}
        run: |
          test -f profiles.yml
          dbt deps
          dbt build --target "${DBT_ENVIRONMENT}" --fail-fast
          dbt test  --target "${DBT_ENVIRONMENT}" --store-failures

      - name: Compute KPIs & DQ signals
        id: kpis
        run: |
          # For env mapping you can customize; here we keep plain 'gold'/'silver'
          python scripts/python/compute_metrics.py \
            --gold-schema   "gold" \
            --silver-schema "silver" \
            --master-schema "${{ inputs.master_schema }}" \
            --sql-file "scripts/sql/kpi_rebuild_and_select.sql" \
            --out "dashboard_metrics.json"
          echo "kpis=$(jq -c '.' dashboard_metrics.json)" >> "$GITHUB_OUTPUT"

      - name: Render Markdown & HTML (publish to ./_site)
        run: |
          python - <<'PY'
          import json, markdown, os
          from datetime import datetime, timezone
          data = json.load(open("dashboard_metrics.json"))
          os.makedirs("_site", exist_ok=True)

          trend = (f"{data.get('order_trend_pct')}%"
                   if data.get('order_trend_pct') is not None else "n/a")
          fresh = (f"{data.get('freshness_hours')}h"
                   if data.get('freshness_hours') is not None else "n/a")

          md = f"""# Observability Dashboard

          **Run:** [{os.getenv('RUN_ID')}]({os.getenv('RUN_URL')})
          **Commit:** `{os.getenv('GIT_SHA')[:7]}`
          **As of:** {datetime.now(timezone.utc).isoformat()}

          ## Business KPIs (Gold)
          - Week Orders: **{data['wk_orders']}**
          - Week Units Shipped: **{data['wk_units']}**
          - Avg Stock Turnover: **{data['avg_turnover']}**
          - Orders Trend vs last week: **{trend}**
          - Latest Date: **{data['last_date']}**

          ## Data Quality
          - Tests: **{data['tests_passed']} / {data['tests_total']}** passed (**{data['pass_rate_pct']}%**)
          - Freshness (silver snapshot): **{fresh}** lag
          - Anomaly Detected: **{':warning: YES' if data['anomaly_flag'] else 'No'}**

          ---
          _Schemas use per-issue isolation for safe iteration where applicable._
          """
          open("_site/dashboard.md","w").write(md)
          open("_site/index.html","w").write(markdown.markdown(md, extensions=['tables']))
          PY

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site

      - name: Slack â€” Success
        if: success() && secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [
                { "type": "header", "text": { "type": "plain_text", "text": "âœ… Observability Dashboard: Healthy Run" } },
                { "type": "section", "fields": [
                  { "type":"mrkdwn", "text":"*Run:* <${{ env.RUN_URL }}|${{ env.RUN_ID }}>" },
                  { "type":"mrkdwn", "text":"*Commit:* `${{ env.GIT_SHA }}`" }
                ]},
                { "type": "divider" },
                { "type": "section", "text": { "type":"mrkdwn",
                  "text": "*Business KPIs (7d)*\nâ€¢ Orders: *${{ fromJson(steps.kpis.outputs.kpis).wk_orders }}*\nâ€¢ Units: *${{ fromJson(steps.kpis.outputs.kpis).wk_units }}*\nâ€¢ Turnover: *${{ fromJson(steps.kpis.outputs.kpis).avg_turnover }}*\nâ€¢ Order trend: *${{ fromJson(steps.kpis.outputs.kpis).order_trend_pct != null && format('{0}%', fromJson(steps.kpis.outputs.kpis).order_trend_pct) || 'n/a' }}*" } },
                { "type": "section", "text": { "type":"mrkdwn",
                  "text": "*Data Quality*\nâ€¢ Tests: *${{ fromJson(steps.kpis.outputs.kpis).tests_passed }} / ${{ fromJson(steps.kpis.outputs.kpis).tests_total }}* (*${{ fromJson(steps.kpis.outputs.kpis).pass_rate_pct }}%*)\nâ€¢ Freshness: *${{ fromJson(steps.kpis.outputs.kpis).freshness_hours != null && format('{0}h', fromJson(steps.kpis.outputs.kpis).freshness_hours) || 'n/a' }}*\nâ€¢ Anomaly: *${{ fromJson(steps.kpis.outputs.kpis).anomaly_flag && ':warning: YES' || 'No' }}*" } }
              ]
            }

      - name: Slack â€” Failure
        if: failure() && secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            { "text": "ðŸš¨ Observability dashboard generation failed. See run ${{ env.RUN_URL }}." }
